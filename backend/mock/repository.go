// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/kerti/balances/backend/model"
	filter "github.com/kerti/balances/backend/util/filter"
)

// MockBankAccount is a mock of BankAccount interface.
type MockBankAccount struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountMockRecorder
}

// MockBankAccountMockRecorder is the mock recorder for MockBankAccount.
type MockBankAccountMockRecorder struct {
	mock *MockBankAccount
}

// NewMockBankAccount creates a new mock instance.
func NewMockBankAccount(ctrl *gomock.Controller) *MockBankAccount {
	mock := &MockBankAccount{ctrl: ctrl}
	mock.recorder = &MockBankAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccount) EXPECT() *MockBankAccountMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBankAccount) Create(bankAccount model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBankAccountMockRecorder) Create(bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBankAccount)(nil).Create), bankAccount)
}

// CreateBalance mocks base method.
func (m *MockBankAccount) CreateBalance(bankAccountBalance model.BankAccountBalance, bankAccount *model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalance", bankAccountBalance, bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBalance indicates an expected call of CreateBalance.
func (mr *MockBankAccountMockRecorder) CreateBalance(bankAccountBalance, bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalance", reflect.TypeOf((*MockBankAccount)(nil).CreateBalance), bankAccountBalance, bankAccount)
}

// ExistsBalanceByID mocks base method.
func (m *MockBankAccount) ExistsBalanceByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsBalanceByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsBalanceByID indicates an expected call of ExistsBalanceByID.
func (mr *MockBankAccountMockRecorder) ExistsBalanceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsBalanceByID", reflect.TypeOf((*MockBankAccount)(nil).ExistsBalanceByID), id)
}

// ExistsByID mocks base method.
func (m *MockBankAccount) ExistsByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockBankAccountMockRecorder) ExistsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockBankAccount)(nil).ExistsByID), id)
}

// ResolveBalancesByFilter mocks base method.
func (m *MockBankAccount) ResolveBalancesByFilter(filter filter.Filter) ([]model.BankAccountBalance, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBalancesByFilter", filter)
	ret0, _ := ret[0].([]model.BankAccountBalance)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveBalancesByFilter indicates an expected call of ResolveBalancesByFilter.
func (mr *MockBankAccountMockRecorder) ResolveBalancesByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBalancesByFilter", reflect.TypeOf((*MockBankAccount)(nil).ResolveBalancesByFilter), filter)
}

// ResolveBalancesByIDs mocks base method.
func (m *MockBankAccount) ResolveBalancesByIDs(ids []uuid.UUID) ([]model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBalancesByIDs", ids)
	ret0, _ := ret[0].([]model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBalancesByIDs indicates an expected call of ResolveBalancesByIDs.
func (mr *MockBankAccountMockRecorder) ResolveBalancesByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBalancesByIDs", reflect.TypeOf((*MockBankAccount)(nil).ResolveBalancesByIDs), ids)
}

// ResolveByFilter mocks base method.
func (m *MockBankAccount) ResolveByFilter(filter filter.Filter) ([]model.BankAccount, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByFilter", filter)
	ret0, _ := ret[0].([]model.BankAccount)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveByFilter indicates an expected call of ResolveByFilter.
func (mr *MockBankAccountMockRecorder) ResolveByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByFilter", reflect.TypeOf((*MockBankAccount)(nil).ResolveByFilter), filter)
}

// ResolveByIDs mocks base method.
func (m *MockBankAccount) ResolveByIDs(ids []uuid.UUID) ([]model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIDs", ids)
	ret0, _ := ret[0].([]model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIDs indicates an expected call of ResolveByIDs.
func (mr *MockBankAccountMockRecorder) ResolveByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIDs", reflect.TypeOf((*MockBankAccount)(nil).ResolveByIDs), ids)
}

// ResolveLastBalancesByBankAccountID mocks base method.
func (m *MockBankAccount) ResolveLastBalancesByBankAccountID(id uuid.UUID, count int) ([]model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveLastBalancesByBankAccountID", id, count)
	ret0, _ := ret[0].([]model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveLastBalancesByBankAccountID indicates an expected call of ResolveLastBalancesByBankAccountID.
func (mr *MockBankAccountMockRecorder) ResolveLastBalancesByBankAccountID(id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveLastBalancesByBankAccountID", reflect.TypeOf((*MockBankAccount)(nil).ResolveLastBalancesByBankAccountID), id, count)
}

// Shutdown mocks base method.
func (m *MockBankAccount) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBankAccountMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBankAccount)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockBankAccount) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockBankAccountMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockBankAccount)(nil).Startup))
}

// Update mocks base method.
func (m *MockBankAccount) Update(bankAccount model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBankAccountMockRecorder) Update(bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBankAccount)(nil).Update), bankAccount)
}

// UpdateBalance mocks base method.
func (m *MockBankAccount) UpdateBalance(bankAccountBalance model.BankAccountBalance, bankAccount *model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", bankAccountBalance, bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockBankAccountMockRecorder) UpdateBalance(bankAccountBalance, bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockBankAccount)(nil).UpdateBalance), bankAccountBalance, bankAccount)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), user)
}

// ExistsByID mocks base method.
func (m *MockUser) ExistsByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockUserMockRecorder) ExistsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockUser)(nil).ExistsByID), id)
}

// ResolveByFilter mocks base method.
func (m *MockUser) ResolveByFilter(filter filter.Filter) ([]model.User, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByFilter", filter)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveByFilter indicates an expected call of ResolveByFilter.
func (mr *MockUserMockRecorder) ResolveByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByFilter", reflect.TypeOf((*MockUser)(nil).ResolveByFilter), filter)
}

// ResolveByIDs mocks base method.
func (m *MockUser) ResolveByIDs(ids []uuid.UUID) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIDs", ids)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIDs indicates an expected call of ResolveByIDs.
func (mr *MockUserMockRecorder) ResolveByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIDs", reflect.TypeOf((*MockUser)(nil).ResolveByIDs), ids)
}

// ResolveByIdentity mocks base method.
func (m *MockUser) ResolveByIdentity(identity string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIdentity", identity)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIdentity indicates an expected call of ResolveByIdentity.
func (mr *MockUserMockRecorder) ResolveByIdentity(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIdentity", reflect.TypeOf((*MockUser)(nil).ResolveByIdentity), identity)
}

// Shutdown mocks base method.
func (m *MockUser) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockUserMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockUser)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockUser) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockUserMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockUser)(nil).Startup))
}

// Update mocks base method.
func (m *MockUser) Update(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), user)
}
