// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/kerti/balances/backend/model"
	filter "github.com/kerti/balances/backend/util/filter"
)

// MockBankAccount is a mock of BankAccount interface.
type MockBankAccount struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountMockRecorder
}

// MockBankAccountMockRecorder is the mock recorder for MockBankAccount.
type MockBankAccountMockRecorder struct {
	mock *MockBankAccount
}

// NewMockBankAccount creates a new mock instance.
func NewMockBankAccount(ctrl *gomock.Controller) *MockBankAccount {
	mock := &MockBankAccount{ctrl: ctrl}
	mock.recorder = &MockBankAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccount) EXPECT() *MockBankAccountMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBankAccount) Create(bankAccount model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBankAccountMockRecorder) Create(bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBankAccount)(nil).Create), bankAccount)
}

// CreateBalance mocks base method.
func (m *MockBankAccount) CreateBalance(bankAccountBalance model.BankAccountBalance, bankAccount *model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalance", bankAccountBalance, bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBalance indicates an expected call of CreateBalance.
func (mr *MockBankAccountMockRecorder) CreateBalance(bankAccountBalance, bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalance", reflect.TypeOf((*MockBankAccount)(nil).CreateBalance), bankAccountBalance, bankAccount)
}

// ExistsBalanceByID mocks base method.
func (m *MockBankAccount) ExistsBalanceByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsBalanceByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsBalanceByID indicates an expected call of ExistsBalanceByID.
func (mr *MockBankAccountMockRecorder) ExistsBalanceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsBalanceByID", reflect.TypeOf((*MockBankAccount)(nil).ExistsBalanceByID), id)
}

// ExistsByID mocks base method.
func (m *MockBankAccount) ExistsByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockBankAccountMockRecorder) ExistsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockBankAccount)(nil).ExistsByID), id)
}

// ResolveBalancesByFilter mocks base method.
func (m *MockBankAccount) ResolveBalancesByFilter(filter filter.Filter) ([]model.BankAccountBalance, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBalancesByFilter", filter)
	ret0, _ := ret[0].([]model.BankAccountBalance)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveBalancesByFilter indicates an expected call of ResolveBalancesByFilter.
func (mr *MockBankAccountMockRecorder) ResolveBalancesByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBalancesByFilter", reflect.TypeOf((*MockBankAccount)(nil).ResolveBalancesByFilter), filter)
}

// ResolveBalancesByIDs mocks base method.
func (m *MockBankAccount) ResolveBalancesByIDs(ids []uuid.UUID) ([]model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBalancesByIDs", ids)
	ret0, _ := ret[0].([]model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBalancesByIDs indicates an expected call of ResolveBalancesByIDs.
func (mr *MockBankAccountMockRecorder) ResolveBalancesByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBalancesByIDs", reflect.TypeOf((*MockBankAccount)(nil).ResolveBalancesByIDs), ids)
}

// ResolveByFilter mocks base method.
func (m *MockBankAccount) ResolveByFilter(filter filter.Filter) ([]model.BankAccount, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByFilter", filter)
	ret0, _ := ret[0].([]model.BankAccount)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveByFilter indicates an expected call of ResolveByFilter.
func (mr *MockBankAccountMockRecorder) ResolveByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByFilter", reflect.TypeOf((*MockBankAccount)(nil).ResolveByFilter), filter)
}

// ResolveByIDs mocks base method.
func (m *MockBankAccount) ResolveByIDs(ids []uuid.UUID) ([]model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIDs", ids)
	ret0, _ := ret[0].([]model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIDs indicates an expected call of ResolveByIDs.
func (mr *MockBankAccountMockRecorder) ResolveByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIDs", reflect.TypeOf((*MockBankAccount)(nil).ResolveByIDs), ids)
}

// ResolveLastBalancesByBankAccountID mocks base method.
func (m *MockBankAccount) ResolveLastBalancesByBankAccountID(id uuid.UUID, count int) ([]model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveLastBalancesByBankAccountID", id, count)
	ret0, _ := ret[0].([]model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveLastBalancesByBankAccountID indicates an expected call of ResolveLastBalancesByBankAccountID.
func (mr *MockBankAccountMockRecorder) ResolveLastBalancesByBankAccountID(id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveLastBalancesByBankAccountID", reflect.TypeOf((*MockBankAccount)(nil).ResolveLastBalancesByBankAccountID), id, count)
}

// Shutdown mocks base method.
func (m *MockBankAccount) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBankAccountMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBankAccount)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockBankAccount) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockBankAccountMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockBankAccount)(nil).Startup))
}

// Update mocks base method.
func (m *MockBankAccount) Update(bankAccount model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBankAccountMockRecorder) Update(bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBankAccount)(nil).Update), bankAccount)
}

// UpdateBalance mocks base method.
func (m *MockBankAccount) UpdateBalance(bankAccountBalance model.BankAccountBalance, bankAccount *model.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", bankAccountBalance, bankAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockBankAccountMockRecorder) UpdateBalance(bankAccountBalance, bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockBankAccount)(nil).UpdateBalance), bankAccountBalance, bankAccount)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), user)
}

// ExistsByID mocks base method.
func (m *MockUser) ExistsByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockUserMockRecorder) ExistsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockUser)(nil).ExistsByID), id)
}

// ResolveByFilter mocks base method.
func (m *MockUser) ResolveByFilter(filter filter.Filter) ([]model.User, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByFilter", filter)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveByFilter indicates an expected call of ResolveByFilter.
func (mr *MockUserMockRecorder) ResolveByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByFilter", reflect.TypeOf((*MockUser)(nil).ResolveByFilter), filter)
}

// ResolveByIDs mocks base method.
func (m *MockUser) ResolveByIDs(ids []uuid.UUID) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIDs", ids)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIDs indicates an expected call of ResolveByIDs.
func (mr *MockUserMockRecorder) ResolveByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIDs", reflect.TypeOf((*MockUser)(nil).ResolveByIDs), ids)
}

// ResolveByIdentity mocks base method.
func (m *MockUser) ResolveByIdentity(identity string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIdentity", identity)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIdentity indicates an expected call of ResolveByIdentity.
func (mr *MockUserMockRecorder) ResolveByIdentity(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIdentity", reflect.TypeOf((*MockUser)(nil).ResolveByIdentity), identity)
}

// Shutdown mocks base method.
func (m *MockUser) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockUserMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockUser)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockUser) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockUserMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockUser)(nil).Startup))
}

// Update mocks base method.
func (m *MockUser) Update(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), user)
}

// MockVehicle is a mock of Vehicle interface.
type MockVehicle struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleMockRecorder
}

// MockVehicleMockRecorder is the mock recorder for MockVehicle.
type MockVehicleMockRecorder struct {
	mock *MockVehicle
}

// NewMockVehicle creates a new mock instance.
func NewMockVehicle(ctrl *gomock.Controller) *MockVehicle {
	mock := &MockVehicle{ctrl: ctrl}
	mock.recorder = &MockVehicleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicle) EXPECT() *MockVehicleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVehicle) Create(vehicle model.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVehicleMockRecorder) Create(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVehicle)(nil).Create), vehicle)
}

// CreateValue mocks base method.
func (m *MockVehicle) CreateValue(vehicleValue model.VehicleValue, vehicle *model.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValue", vehicleValue, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateValue indicates an expected call of CreateValue.
func (mr *MockVehicleMockRecorder) CreateValue(vehicleValue, vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValue", reflect.TypeOf((*MockVehicle)(nil).CreateValue), vehicleValue, vehicle)
}

// ExistsByID mocks base method.
func (m *MockVehicle) ExistsByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockVehicleMockRecorder) ExistsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockVehicle)(nil).ExistsByID), id)
}

// ExistsValueByID mocks base method.
func (m *MockVehicle) ExistsValueByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsValueByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsValueByID indicates an expected call of ExistsValueByID.
func (mr *MockVehicleMockRecorder) ExistsValueByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsValueByID", reflect.TypeOf((*MockVehicle)(nil).ExistsValueByID), id)
}

// ResolveByFilter mocks base method.
func (m *MockVehicle) ResolveByFilter(filter filter.Filter) ([]model.Vehicle, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByFilter", filter)
	ret0, _ := ret[0].([]model.Vehicle)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveByFilter indicates an expected call of ResolveByFilter.
func (mr *MockVehicleMockRecorder) ResolveByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByFilter", reflect.TypeOf((*MockVehicle)(nil).ResolveByFilter), filter)
}

// ResolveByIDs mocks base method.
func (m *MockVehicle) ResolveByIDs(ids []uuid.UUID) ([]model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIDs", ids)
	ret0, _ := ret[0].([]model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIDs indicates an expected call of ResolveByIDs.
func (mr *MockVehicleMockRecorder) ResolveByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIDs", reflect.TypeOf((*MockVehicle)(nil).ResolveByIDs), ids)
}

// ResolveLastValuesByVehicleID mocks base method.
func (m *MockVehicle) ResolveLastValuesByVehicleID(id uuid.UUID, count int) ([]model.VehicleValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveLastValuesByVehicleID", id, count)
	ret0, _ := ret[0].([]model.VehicleValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveLastValuesByVehicleID indicates an expected call of ResolveLastValuesByVehicleID.
func (mr *MockVehicleMockRecorder) ResolveLastValuesByVehicleID(id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveLastValuesByVehicleID", reflect.TypeOf((*MockVehicle)(nil).ResolveLastValuesByVehicleID), id, count)
}

// ResolveValuesByFilter mocks base method.
func (m *MockVehicle) ResolveValuesByFilter(filter filter.Filter) ([]model.VehicleValue, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveValuesByFilter", filter)
	ret0, _ := ret[0].([]model.VehicleValue)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveValuesByFilter indicates an expected call of ResolveValuesByFilter.
func (mr *MockVehicleMockRecorder) ResolveValuesByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveValuesByFilter", reflect.TypeOf((*MockVehicle)(nil).ResolveValuesByFilter), filter)
}

// ResolveValuesByIDs mocks base method.
func (m *MockVehicle) ResolveValuesByIDs(ids []uuid.UUID) ([]model.VehicleValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveValuesByIDs", ids)
	ret0, _ := ret[0].([]model.VehicleValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveValuesByIDs indicates an expected call of ResolveValuesByIDs.
func (mr *MockVehicleMockRecorder) ResolveValuesByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveValuesByIDs", reflect.TypeOf((*MockVehicle)(nil).ResolveValuesByIDs), ids)
}

// Shutdown mocks base method.
func (m *MockVehicle) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockVehicleMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockVehicle)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockVehicle) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockVehicleMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockVehicle)(nil).Startup))
}

// Update mocks base method.
func (m *MockVehicle) Update(vehicle model.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVehicleMockRecorder) Update(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicle)(nil).Update), vehicle)
}

// UpdateValue mocks base method.
func (m *MockVehicle) UpdateValue(vehicleValue model.VehicleValue, vehicle *model.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValue", vehicleValue, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValue indicates an expected call of UpdateValue.
func (mr *MockVehicleMockRecorder) UpdateValue(vehicleValue, vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValue", reflect.TypeOf((*MockVehicle)(nil).UpdateValue), vehicleValue, vehicle)
}

// MockProperty is a mock of Property interface.
type MockProperty struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyMockRecorder
}

// MockPropertyMockRecorder is the mock recorder for MockProperty.
type MockPropertyMockRecorder struct {
	mock *MockProperty
}

// NewMockProperty creates a new mock instance.
func NewMockProperty(ctrl *gomock.Controller) *MockProperty {
	mock := &MockProperty{ctrl: ctrl}
	mock.recorder = &MockPropertyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProperty) EXPECT() *MockPropertyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProperty) Create(vehicle model.Property) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPropertyMockRecorder) Create(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProperty)(nil).Create), vehicle)
}

// CreateValue mocks base method.
func (m *MockProperty) CreateValue(vehicleValue model.PropertyValue, vehicle *model.Property) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValue", vehicleValue, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateValue indicates an expected call of CreateValue.
func (mr *MockPropertyMockRecorder) CreateValue(vehicleValue, vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValue", reflect.TypeOf((*MockProperty)(nil).CreateValue), vehicleValue, vehicle)
}

// ExistsByID mocks base method.
func (m *MockProperty) ExistsByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockPropertyMockRecorder) ExistsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockProperty)(nil).ExistsByID), id)
}

// ExistsValueByID mocks base method.
func (m *MockProperty) ExistsValueByID(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsValueByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsValueByID indicates an expected call of ExistsValueByID.
func (mr *MockPropertyMockRecorder) ExistsValueByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsValueByID", reflect.TypeOf((*MockProperty)(nil).ExistsValueByID), id)
}

// ResolveByFilter mocks base method.
func (m *MockProperty) ResolveByFilter(filter filter.Filter) ([]model.Property, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByFilter", filter)
	ret0, _ := ret[0].([]model.Property)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveByFilter indicates an expected call of ResolveByFilter.
func (mr *MockPropertyMockRecorder) ResolveByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByFilter", reflect.TypeOf((*MockProperty)(nil).ResolveByFilter), filter)
}

// ResolveByIDs mocks base method.
func (m *MockProperty) ResolveByIDs(ids []uuid.UUID) ([]model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveByIDs", ids)
	ret0, _ := ret[0].([]model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByIDs indicates an expected call of ResolveByIDs.
func (mr *MockPropertyMockRecorder) ResolveByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByIDs", reflect.TypeOf((*MockProperty)(nil).ResolveByIDs), ids)
}

// ResolveLastValuesByPropertyID mocks base method.
func (m *MockProperty) ResolveLastValuesByPropertyID(id uuid.UUID, count int) ([]model.PropertyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveLastValuesByPropertyID", id, count)
	ret0, _ := ret[0].([]model.PropertyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveLastValuesByPropertyID indicates an expected call of ResolveLastValuesByPropertyID.
func (mr *MockPropertyMockRecorder) ResolveLastValuesByPropertyID(id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveLastValuesByPropertyID", reflect.TypeOf((*MockProperty)(nil).ResolveLastValuesByPropertyID), id, count)
}

// ResolveValuesByFilter mocks base method.
func (m *MockProperty) ResolveValuesByFilter(filter filter.Filter) ([]model.PropertyValue, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveValuesByFilter", filter)
	ret0, _ := ret[0].([]model.PropertyValue)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveValuesByFilter indicates an expected call of ResolveValuesByFilter.
func (mr *MockPropertyMockRecorder) ResolveValuesByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveValuesByFilter", reflect.TypeOf((*MockProperty)(nil).ResolveValuesByFilter), filter)
}

// ResolveValuesByIDs mocks base method.
func (m *MockProperty) ResolveValuesByIDs(ids []uuid.UUID) ([]model.PropertyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveValuesByIDs", ids)
	ret0, _ := ret[0].([]model.PropertyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveValuesByIDs indicates an expected call of ResolveValuesByIDs.
func (mr *MockPropertyMockRecorder) ResolveValuesByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveValuesByIDs", reflect.TypeOf((*MockProperty)(nil).ResolveValuesByIDs), ids)
}

// Shutdown mocks base method.
func (m *MockProperty) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockPropertyMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockProperty)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockProperty) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockPropertyMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockProperty)(nil).Startup))
}

// Update mocks base method.
func (m *MockProperty) Update(vehicle model.Property) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPropertyMockRecorder) Update(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProperty)(nil).Update), vehicle)
}

// UpdateValue mocks base method.
func (m *MockProperty) UpdateValue(vehicleValue model.PropertyValue, vehicle *model.Property) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValue", vehicleValue, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValue indicates an expected call of UpdateValue.
func (mr *MockPropertyMockRecorder) UpdateValue(vehicleValue, vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValue", reflect.TypeOf((*MockProperty)(nil).UpdateValue), vehicleValue, vehicle)
}
