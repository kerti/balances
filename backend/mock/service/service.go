// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/kerti/balances/backend/model"
	cachetime "github.com/kerti/balances/backend/util/cachetime"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuth) Authenticate(basic string) (*model.AuthenticationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", basic)
	ret0, _ := ret[0].(*model.AuthenticationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthMockRecorder) Authenticate(basic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuth)(nil).Authenticate), basic)
}

// Authorize mocks base method.
func (m *MockAuth) Authorize(bearer string) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", bearer)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthMockRecorder) Authorize(bearer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuth)(nil).Authorize), bearer)
}

// GetToken mocks base method.
func (m *MockAuth) GetToken(user model.User) (*string, *time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", user)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetToken indicates an expected call of GetToken.
func (mr *MockAuthMockRecorder) GetToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAuth)(nil).GetToken), user)
}

// Shutdown mocks base method.
func (m *MockAuth) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockAuthMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockAuth)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockAuth) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockAuthMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockAuth)(nil).Startup))
}

// MockBankAccount is a mock of BankAccount interface.
type MockBankAccount struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountMockRecorder
}

// MockBankAccountMockRecorder is the mock recorder for MockBankAccount.
type MockBankAccountMockRecorder struct {
	mock *MockBankAccount
}

// NewMockBankAccount creates a new mock instance.
func NewMockBankAccount(ctrl *gomock.Controller) *MockBankAccount {
	mock := &MockBankAccount{ctrl: ctrl}
	mock.recorder = &MockBankAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccount) EXPECT() *MockBankAccountMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBankAccount) Create(input model.BankAccountInput, userID uuid.UUID) (*model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input, userID)
	ret0, _ := ret[0].(*model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBankAccountMockRecorder) Create(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBankAccount)(nil).Create), input, userID)
}

// CreateBalance mocks base method.
func (m *MockBankAccount) CreateBalance(input model.BankAccountBalanceInput, userID uuid.UUID) (*model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalance", input, userID)
	ret0, _ := ret[0].(*model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBalance indicates an expected call of CreateBalance.
func (mr *MockBankAccountMockRecorder) CreateBalance(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalance", reflect.TypeOf((*MockBankAccount)(nil).CreateBalance), input, userID)
}

// Delete mocks base method.
func (m *MockBankAccount) Delete(id, userID uuid.UUID) (*model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, userID)
	ret0, _ := ret[0].(*model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBankAccountMockRecorder) Delete(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBankAccount)(nil).Delete), id, userID)
}

// DeleteBalance mocks base method.
func (m *MockBankAccount) DeleteBalance(id, userID uuid.UUID) (*model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBalance", id, userID)
	ret0, _ := ret[0].(*model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBalance indicates an expected call of DeleteBalance.
func (mr *MockBankAccountMockRecorder) DeleteBalance(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBalance", reflect.TypeOf((*MockBankAccount)(nil).DeleteBalance), id, userID)
}

// GetBalanceByID mocks base method.
func (m *MockBankAccount) GetBalanceByID(id uuid.UUID) (*model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByID", id)
	ret0, _ := ret[0].(*model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByID indicates an expected call of GetBalanceByID.
func (mr *MockBankAccountMockRecorder) GetBalanceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByID", reflect.TypeOf((*MockBankAccount)(nil).GetBalanceByID), id)
}

// GetBalancesByFilter mocks base method.
func (m *MockBankAccount) GetBalancesByFilter(input model.BankAccountBalanceFilterInput) ([]model.BankAccountBalance, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancesByFilter", input)
	ret0, _ := ret[0].([]model.BankAccountBalance)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBalancesByFilter indicates an expected call of GetBalancesByFilter.
func (mr *MockBankAccountMockRecorder) GetBalancesByFilter(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancesByFilter", reflect.TypeOf((*MockBankAccount)(nil).GetBalancesByFilter), input)
}

// GetByFilter mocks base method.
func (m *MockBankAccount) GetByFilter(input model.BankAccountFilterInput) ([]model.BankAccount, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", input)
	ret0, _ := ret[0].([]model.BankAccount)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockBankAccountMockRecorder) GetByFilter(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockBankAccount)(nil).GetByFilter), input)
}

// GetByID mocks base method.
func (m *MockBankAccount) GetByID(id uuid.UUID, withBalances bool, balanceStartDate, balanceEndDate cachetime.NCacheTime, pageSize *int) (*model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, withBalances, balanceStartDate, balanceEndDate, pageSize)
	ret0, _ := ret[0].(*model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBankAccountMockRecorder) GetByID(id, withBalances, balanceStartDate, balanceEndDate, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBankAccount)(nil).GetByID), id, withBalances, balanceStartDate, balanceEndDate, pageSize)
}

// Shutdown mocks base method.
func (m *MockBankAccount) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBankAccountMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBankAccount)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockBankAccount) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockBankAccountMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockBankAccount)(nil).Startup))
}

// Update mocks base method.
func (m *MockBankAccount) Update(input model.BankAccountInput, userID uuid.UUID) (*model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input, userID)
	ret0, _ := ret[0].(*model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBankAccountMockRecorder) Update(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBankAccount)(nil).Update), input, userID)
}

// UpdateBalance mocks base method.
func (m *MockBankAccount) UpdateBalance(input model.BankAccountBalanceInput, userID uuid.UUID) (*model.BankAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", input, userID)
	ret0, _ := ret[0].(*model.BankAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockBankAccountMockRecorder) UpdateBalance(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockBankAccount)(nil).UpdateBalance), input, userID)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(input model.UserInput, userID uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), input, userID)
}

// GetByFilter mocks base method.
func (m *MockUser) GetByFilter(input model.UserFilterInput) ([]model.User, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", input)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockUserMockRecorder) GetByFilter(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockUser)(nil).GetByFilter), input)
}

// GetByID mocks base method.
func (m *MockUser) GetByID(id uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUser)(nil).GetByID), id)
}

// Shutdown mocks base method.
func (m *MockUser) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockUserMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockUser)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockUser) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockUserMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockUser)(nil).Startup))
}

// Update mocks base method.
func (m *MockUser) Update(input model.UserInput, userID uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), input, userID)
}

// MockVehicle is a mock of Vehicle interface.
type MockVehicle struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleMockRecorder
}

// MockVehicleMockRecorder is the mock recorder for MockVehicle.
type MockVehicleMockRecorder struct {
	mock *MockVehicle
}

// NewMockVehicle creates a new mock instance.
func NewMockVehicle(ctrl *gomock.Controller) *MockVehicle {
	mock := &MockVehicle{ctrl: ctrl}
	mock.recorder = &MockVehicleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicle) EXPECT() *MockVehicleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVehicle) Create(input model.VehicleInput, userID uuid.UUID) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input, userID)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVehicleMockRecorder) Create(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVehicle)(nil).Create), input, userID)
}

// CreateValue mocks base method.
func (m *MockVehicle) CreateValue(input model.VehicleValueInput, userID uuid.UUID) (*model.VehicleValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValue", input, userID)
	ret0, _ := ret[0].(*model.VehicleValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateValue indicates an expected call of CreateValue.
func (mr *MockVehicleMockRecorder) CreateValue(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValue", reflect.TypeOf((*MockVehicle)(nil).CreateValue), input, userID)
}

// Delete mocks base method.
func (m *MockVehicle) Delete(id, userID uuid.UUID) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, userID)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVehicleMockRecorder) Delete(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVehicle)(nil).Delete), id, userID)
}

// DeleteValue mocks base method.
func (m *MockVehicle) DeleteValue(id, userID uuid.UUID) (*model.VehicleValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValue", id, userID)
	ret0, _ := ret[0].(*model.VehicleValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValue indicates an expected call of DeleteValue.
func (mr *MockVehicleMockRecorder) DeleteValue(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValue", reflect.TypeOf((*MockVehicle)(nil).DeleteValue), id, userID)
}

// GetByFilter mocks base method.
func (m *MockVehicle) GetByFilter(input model.VehicleFilterInput) ([]model.Vehicle, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", input)
	ret0, _ := ret[0].([]model.Vehicle)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockVehicleMockRecorder) GetByFilter(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockVehicle)(nil).GetByFilter), input)
}

// GetByID mocks base method.
func (m *MockVehicle) GetByID(id uuid.UUID, withValues bool, valueStartDate, valueEndDate cachetime.NCacheTime, pageSize *int) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, withValues, valueStartDate, valueEndDate, pageSize)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVehicleMockRecorder) GetByID(id, withValues, valueStartDate, valueEndDate, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVehicle)(nil).GetByID), id, withValues, valueStartDate, valueEndDate, pageSize)
}

// GetValueByID mocks base method.
func (m *MockVehicle) GetValueByID(id uuid.UUID) (*model.VehicleValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueByID", id)
	ret0, _ := ret[0].(*model.VehicleValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueByID indicates an expected call of GetValueByID.
func (mr *MockVehicleMockRecorder) GetValueByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueByID", reflect.TypeOf((*MockVehicle)(nil).GetValueByID), id)
}

// GetValuesByFilter mocks base method.
func (m *MockVehicle) GetValuesByFilter(input model.VehicleValueFilterInput) ([]model.VehicleValue, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesByFilter", input)
	ret0, _ := ret[0].([]model.VehicleValue)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValuesByFilter indicates an expected call of GetValuesByFilter.
func (mr *MockVehicleMockRecorder) GetValuesByFilter(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesByFilter", reflect.TypeOf((*MockVehicle)(nil).GetValuesByFilter), input)
}

// Shutdown mocks base method.
func (m *MockVehicle) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockVehicleMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockVehicle)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockVehicle) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockVehicleMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockVehicle)(nil).Startup))
}

// Update mocks base method.
func (m *MockVehicle) Update(input model.VehicleInput, userID uuid.UUID) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input, userID)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVehicleMockRecorder) Update(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicle)(nil).Update), input, userID)
}

// UpdateValue mocks base method.
func (m *MockVehicle) UpdateValue(input model.VehicleValueInput, userID uuid.UUID) (*model.VehicleValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValue", input, userID)
	ret0, _ := ret[0].(*model.VehicleValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateValue indicates an expected call of UpdateValue.
func (mr *MockVehicleMockRecorder) UpdateValue(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValue", reflect.TypeOf((*MockVehicle)(nil).UpdateValue), input, userID)
}

// MockProperty is a mock of Property interface.
type MockProperty struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyMockRecorder
}

// MockPropertyMockRecorder is the mock recorder for MockProperty.
type MockPropertyMockRecorder struct {
	mock *MockProperty
}

// NewMockProperty creates a new mock instance.
func NewMockProperty(ctrl *gomock.Controller) *MockProperty {
	mock := &MockProperty{ctrl: ctrl}
	mock.recorder = &MockPropertyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProperty) EXPECT() *MockPropertyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProperty) Create(input model.PropertyInput, userID uuid.UUID) (*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input, userID)
	ret0, _ := ret[0].(*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPropertyMockRecorder) Create(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProperty)(nil).Create), input, userID)
}

// CreateValue mocks base method.
func (m *MockProperty) CreateValue(input model.PropertyValueInput, userID uuid.UUID) (*model.PropertyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValue", input, userID)
	ret0, _ := ret[0].(*model.PropertyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateValue indicates an expected call of CreateValue.
func (mr *MockPropertyMockRecorder) CreateValue(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValue", reflect.TypeOf((*MockProperty)(nil).CreateValue), input, userID)
}

// Delete mocks base method.
func (m *MockProperty) Delete(id, userID uuid.UUID) (*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, userID)
	ret0, _ := ret[0].(*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPropertyMockRecorder) Delete(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProperty)(nil).Delete), id, userID)
}

// DeleteValue mocks base method.
func (m *MockProperty) DeleteValue(id, userID uuid.UUID) (*model.PropertyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValue", id, userID)
	ret0, _ := ret[0].(*model.PropertyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValue indicates an expected call of DeleteValue.
func (mr *MockPropertyMockRecorder) DeleteValue(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValue", reflect.TypeOf((*MockProperty)(nil).DeleteValue), id, userID)
}

// GetByFilter mocks base method.
func (m *MockProperty) GetByFilter(input model.PropertyFilterInput) ([]model.Property, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", input)
	ret0, _ := ret[0].([]model.Property)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockPropertyMockRecorder) GetByFilter(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockProperty)(nil).GetByFilter), input)
}

// GetByID mocks base method.
func (m *MockProperty) GetByID(id uuid.UUID, withValues bool, valueStartDate, valueEndDate cachetime.NCacheTime, pageSize *int) (*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, withValues, valueStartDate, valueEndDate, pageSize)
	ret0, _ := ret[0].(*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPropertyMockRecorder) GetByID(id, withValues, valueStartDate, valueEndDate, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProperty)(nil).GetByID), id, withValues, valueStartDate, valueEndDate, pageSize)
}

// GetValueByID mocks base method.
func (m *MockProperty) GetValueByID(id uuid.UUID) (*model.PropertyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueByID", id)
	ret0, _ := ret[0].(*model.PropertyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueByID indicates an expected call of GetValueByID.
func (mr *MockPropertyMockRecorder) GetValueByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueByID", reflect.TypeOf((*MockProperty)(nil).GetValueByID), id)
}

// GetValuesByFilter mocks base method.
func (m *MockProperty) GetValuesByFilter(input model.PropertyValueFilterInput) ([]model.PropertyValue, model.PageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesByFilter", input)
	ret0, _ := ret[0].([]model.PropertyValue)
	ret1, _ := ret[1].(model.PageInfoOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValuesByFilter indicates an expected call of GetValuesByFilter.
func (mr *MockPropertyMockRecorder) GetValuesByFilter(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesByFilter", reflect.TypeOf((*MockProperty)(nil).GetValuesByFilter), input)
}

// Shutdown mocks base method.
func (m *MockProperty) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockPropertyMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockProperty)(nil).Shutdown))
}

// Startup mocks base method.
func (m *MockProperty) Startup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Startup")
}

// Startup indicates an expected call of Startup.
func (mr *MockPropertyMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockProperty)(nil).Startup))
}

// Update mocks base method.
func (m *MockProperty) Update(input model.PropertyInput, userID uuid.UUID) (*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input, userID)
	ret0, _ := ret[0].(*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPropertyMockRecorder) Update(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProperty)(nil).Update), input, userID)
}

// UpdateValue mocks base method.
func (m *MockProperty) UpdateValue(input model.PropertyValueInput, userID uuid.UUID) (*model.PropertyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValue", input, userID)
	ret0, _ := ret[0].(*model.PropertyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateValue indicates an expected call of UpdateValue.
func (mr *MockPropertyMockRecorder) UpdateValue(input, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValue", reflect.TypeOf((*MockProperty)(nil).UpdateValue), input, userID)
}
